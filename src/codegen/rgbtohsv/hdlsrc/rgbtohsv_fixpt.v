// -------------------------------------------------------------
// 
// File Name: C:\Users\Sechw\Documents\MATLAB\4440\codegen\rgbtohsv\hdlsrc\rgbtohsv_fixpt.v
// Created: 2014-12-16 00:44:50
// 
// Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// h                             ce_out        1
// s                             ce_out        1
// v                             ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: rgbtohsv_fixpt
// Source Path: rgbtohsv_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module rgbtohsv_fixpt
          (
           clk,
           reset,
           ce,
           r,
           g,
           b,
           ce_out,
           h,
           s,
           v
          );


  input   clk;
  input   reset;
  input   ce;
  input   [7:0] r;  // ufix8
  input   [7:0] g;  // ufix8
  input   [7:0] b;  // ufix8
  output  ce_out;
  output  [7:0] h;  // ufix8
  output  [7:0] s;  // ufix8
  output  [7:0] v;  // ufix8


  wire enb;
  reg [7:0] h_1;  // ufix8
  reg [7:0] s_1;  // ufix8
  reg [7:0] v_1;  // ufix8
  reg [15:0] rgbtohsv_fixpt_r_d_1;  // ufix16_En7
  reg [15:0] rgbtohsv_fixpt_g_d_1;  // ufix16_En7
  reg [15:0] rgbtohsv_fixpt_b_d_1;  // ufix16_En7
  reg [15:0] rgbtohsv_fixpt_Cmax_1;  // ufix16_En15
  reg [15:0] rgbtohsv_fixpt_delta_1;  // ufix16_En15
  reg [15:0] rgbtohsv_fixpt_h_d_1;  // ufix16_En12
  reg [15:0] rgbtohsv_fixpt_tmp_3;  // ufix16_En15
  reg [15:0] rgbtohsv_fixpt_tmp_0_1;  // ufix16_En7
  reg [15:0] rgbtohsv_fixpt_tmp_1_1;  // ufix16_En7
  reg [15:0] rgbtohsv_fixpt_tmp_2_1;  // ufix16_En12
  reg [31:0] rgbtohsv_fixpt_div_temp_3;  // ufix32_En16
  reg [32:0] rgbtohsv_fixpt_div_temp_0_1;  // ufix33_En8
  reg [32:0] rgbtohsv_fixpt_div_temp_1_1;  // ufix33_En8
  reg [32:0] rgbtohsv_fixpt_div_temp_2_1;  // ufix33_En8
  reg signed [31:0] rgbtohsv_fixpt_cast_24;  // int32
  reg [15:0] rgbtohsv_fixpt_cast_0_1;  // ufix16_En7
  reg [31:0] rgbtohsv_fixpt_mul_temp_6;  // ufix32_En30
  reg signed [31:0] rgbtohsv_fixpt_cast_1_1;  // int32
  reg [15:0] rgbtohsv_fixpt_cast_2_1;  // ufix16_En7
  reg [31:0] rgbtohsv_fixpt_mul_temp_0_1;  // ufix32_En30
  reg signed [31:0] rgbtohsv_fixpt_cast_3_1;  // int32
  reg [15:0] rgbtohsv_fixpt_cast_4_1;  // ufix16_En7
  reg [31:0] rgbtohsv_fixpt_mul_temp_1_1;  // ufix32_En30
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_8;  // sfix18_En15
  reg [15:0] rgbtohsv_fixpt_sub_cast_0_1;  // ufix16_En15
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_1_1;  // sfix18_En15
  reg signed [17:0] rgbtohsv_fixpt_sub_temp_3;  // sfix18_En15
  reg [31:0] rgbtohsv_fixpt_cast_5_1;  // ufix32_En31
  reg [23:0] rgbtohsv_fixpt_cast_6_1;  // ufix24_En15
  reg [23:0] rgbtohsv_fixpt_cast_7_1;  // ufix24_En15
  reg [23:0] rgbtohsv_fixpt_cast_8_1;  // ufix24_En15
  reg [23:0] rgbtohsv_fixpt_cast_9_1;  // ufix24_En15
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_2_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_3_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_temp_0_1;  // sfix18_En7
  reg [16:0] rgbtohsv_fixpt_cast_10_1;  // ufix17_En7
  reg [32:0] rgbtohsv_fixpt_cast_11_1;  // ufix33_En23
  reg [23:0] rgbtohsv_fixpt_cast_12_1;  // ufix24_En15
  reg [23:0] rgbtohsv_fixpt_cast_13_1;  // ufix24_En15
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_4_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_5_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_temp_1_1;  // sfix18_En7
  reg [16:0] rgbtohsv_fixpt_cast_14_1;  // ufix17_En7
  reg [32:0] rgbtohsv_fixpt_cast_15_1;  // ufix33_En23
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_6_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_cast_7_1;  // sfix18_En7
  reg signed [17:0] rgbtohsv_fixpt_sub_temp_2_1;  // sfix18_En7
  reg [16:0] rgbtohsv_fixpt_cast_16_1;  // ufix17_En7
  reg [32:0] rgbtohsv_fixpt_cast_17_1;  // ufix33_En23
  reg [33:0] rgbtohsv_fixpt_add_cast_5;  // ufix34_En8
  reg [34:0] rgbtohsv_fixpt_add_cast_0_1;  // ufix35_En8
  reg [34:0] rgbtohsv_fixpt_add_temp_2;  // ufix35_En8
  reg [33:0] rgbtohsv_fixpt_cast_18_1;  // ufix34_En8
  reg [31:0] rgbtohsv_fixpt_mul_temp_2_1;  // ufix32_En30
  reg [33:0] rgbtohsv_fixpt_add_cast_1_1;  // ufix34_En8
  reg [34:0] rgbtohsv_fixpt_add_cast_2_1;  // ufix35_En8
  reg [34:0] rgbtohsv_fixpt_add_temp_0_1;  // ufix35_En8
  reg [33:0] rgbtohsv_fixpt_cast_19_1;  // ufix34_En8
  reg [16:0] rgbtohsv_fixpt_add_cast_3_1;  // ufix17_En12
  reg [17:0] rgbtohsv_fixpt_add_cast_4_1;  // ufix18_En12
  reg [17:0] rgbtohsv_fixpt_add_temp_1_1;  // ufix18_En12
  reg [16:0] rgbtohsv_fixpt_cast_20_1;  // ufix17_En12
  reg [24:0] rgbtohsv_fixpt_mul_temp_3_1;  // ufix25_En12
  reg [7:0] rgbtohsv_fixpt_cast_21_1;  // uint8
  reg [24:0] rgbtohsv_fixpt_mul_temp_4_1;  // ufix25_En15
  reg [7:0] rgbtohsv_fixpt_cast_22_1;  // uint8
  reg [24:0] rgbtohsv_fixpt_mul_temp_5_1;  // ufix25_En15
  reg [7:0] rgbtohsv_fixpt_cast_23_1;  // uint8


  assign enb = ce;

  always @(r, g, b) begin
    //HDL code generation from MATLAB function: rgbtohsv_fixpt
    //'rgbtohsv_fixpt:38' h_d = fi(h_d + fi(1, 0, 1, 0, fm), 0, 16, 12, fm);
    //'rgbtohsv_fixpt:28' h_d = fi(0, 0, 16, 12, fm);
    //'rgbtohsv_fixpt:60' c = fi( c1, numerictype( c1 ), fimath( a ) );
    //'rgbtohsv_fixpt:59' c1 = divide( divideType( a1, b1 ), a1, b1 );
    //'rgbtohsv_fixpt:58' b1 = fi( b, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:57' a1 = fi( a, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:56' if isfi( a ) && isfi( b )
    //'rgbtohsv_fixpt:55' coder.inline( 'always' );
    //'rgbtohsv_fixpt:30' h_d = fi(fi_div((g_d - b_d), delta), 0, 16, 12, fm);
    //'rgbtohsv_fixpt:29' elseif r_d==Cmax
    //'rgbtohsv_fixpt:60' c = fi( c1, numerictype( c1 ), fimath( a ) );
    //'rgbtohsv_fixpt:59' c1 = divide( divideType( a1, b1 ), a1, b1 );
    //'rgbtohsv_fixpt:58' b1 = fi( b, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:57' a1 = fi( a, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:56' if isfi( a ) && isfi( b )
    //'rgbtohsv_fixpt:55' coder.inline( 'always' );
    //'rgbtohsv_fixpt:32' h_d = fi(fi(2, 0, 2, 0, fm) + fi_div((b_d - r_d), delta), 0, 16, 12, fm);
    //'rgbtohsv_fixpt:31' elseif g_d==Cmax
    //'rgbtohsv_fixpt:60' c = fi( c1, numerictype( c1 ), fimath( a ) );
    //'rgbtohsv_fixpt:59' c1 = divide( divideType( a1, b1 ), a1, b1 );
    //'rgbtohsv_fixpt:58' b1 = fi( b, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:57' a1 = fi( a, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:56' if isfi( a ) && isfi( b )
    //'rgbtohsv_fixpt:55' coder.inline( 'always' );
    //'rgbtohsv_fixpt:34' h_d = fi(fi(4, 0, 3, 0, fm) + fi_div((r_d - g_d), delta), 0, 16, 12, fm);
    //'rgbtohsv_fixpt:33' elseif b_d==Cmax
    //'rgbtohsv_fixpt:23' s_d = fi(0, 0, 16, 15, fm);
    //'rgbtohsv_fixpt:60' c = fi( c1, numerictype( c1 ), fimath( a ) );
    //'rgbtohsv_fixpt:59' c1 = divide( divideType( a1, b1 ), a1, b1 );
    //'rgbtohsv_fixpt:58' b1 = fi( b, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:57' a1 = fi( a, 'RoundMode', 'fix' );
    //'rgbtohsv_fixpt:56' if isfi( a ) && isfi( b )
    //'rgbtohsv_fixpt:55' coder.inline( 'always' );
    //'rgbtohsv_fixpt:25' s_d = fi(fi_div(delta, Cmax), 0, 16, 15, fm);
    //'rgbtohsv_fixpt:24' else
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //                                                                          %
    //       Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3        %
    //                                                                          %
    //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //'rgbtohsv_fixpt:9' fm = fimath('RoundingMethod', 'Floor', 'OverflowAction', 'Saturate', 'ProductMode', 'FullPrecision', 'SumMode', 'FullPrecision');
    //'rgbtohsv_fixpt:10' r_d = fi(double( r ), 0, 16, 7, fm);
    //'rgbtohsv_fixpt:11' g_d = fi(double( g ), 0, 16, 7, fm);
    //'rgbtohsv_fixpt:12' b_d = fi(double( b ), 0, 16, 7, fm);
    //'rgbtohsv_fixpt:13' r_d = fi(r_d*fi(1/255, 0, 16, 23, fm), 0, 16, 7, fm);
    rgbtohsv_fixpt_cast_24 = r;
    if ((rgbtohsv_fixpt_cast_24[31] == 1'b0) && (rgbtohsv_fixpt_cast_24[30:9] != 22'b0000000000000000000000)) begin
      rgbtohsv_fixpt_cast_0_1 = 16'b1111111111111111;
    end
    else if (rgbtohsv_fixpt_cast_24[31] == 1'b1) begin
      rgbtohsv_fixpt_cast_0_1 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_cast_0_1 = {rgbtohsv_fixpt_cast_24[8:0], 7'b0000000};
    end
    rgbtohsv_fixpt_mul_temp_6 = rgbtohsv_fixpt_cast_0_1 * 32896;
    rgbtohsv_fixpt_r_d_1 = rgbtohsv_fixpt_mul_temp_6[31:23];
    //'rgbtohsv_fixpt:14' g_d = fi(g_d*fi(1/255, 0, 16, 23, fm), 0, 16, 7, fm);
    rgbtohsv_fixpt_cast_1_1 = g;
    if ((rgbtohsv_fixpt_cast_1_1[31] == 1'b0) && (rgbtohsv_fixpt_cast_1_1[30:9] != 22'b0000000000000000000000)) begin
      rgbtohsv_fixpt_cast_2_1 = 16'b1111111111111111;
    end
    else if (rgbtohsv_fixpt_cast_1_1[31] == 1'b1) begin
      rgbtohsv_fixpt_cast_2_1 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_cast_2_1 = {rgbtohsv_fixpt_cast_1_1[8:0], 7'b0000000};
    end
    rgbtohsv_fixpt_mul_temp_0_1 = rgbtohsv_fixpt_cast_2_1 * 32896;
    rgbtohsv_fixpt_g_d_1 = rgbtohsv_fixpt_mul_temp_0_1[31:23];
    //'rgbtohsv_fixpt:15' b_d = fi(b_d*fi(1/255, 0, 16, 23, fm), 0, 16, 7, fm);
    rgbtohsv_fixpt_cast_3_1 = b;
    if ((rgbtohsv_fixpt_cast_3_1[31] == 1'b0) && (rgbtohsv_fixpt_cast_3_1[30:9] != 22'b0000000000000000000000)) begin
      rgbtohsv_fixpt_cast_4_1 = 16'b1111111111111111;
    end
    else if (rgbtohsv_fixpt_cast_3_1[31] == 1'b1) begin
      rgbtohsv_fixpt_cast_4_1 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_cast_4_1 = {rgbtohsv_fixpt_cast_3_1[8:0], 7'b0000000};
    end
    rgbtohsv_fixpt_mul_temp_1_1 = rgbtohsv_fixpt_cast_4_1 * 32896;
    rgbtohsv_fixpt_b_d_1 = rgbtohsv_fixpt_mul_temp_1_1[31:23];
    //'rgbtohsv_fixpt:16' Cmax = fi(max( max( r_d, g_d ), b_d ), 0, 16, 15, fm);
    if (rgbtohsv_fixpt_r_d_1 < rgbtohsv_fixpt_g_d_1) begin
      rgbtohsv_fixpt_tmp_0_1 = rgbtohsv_fixpt_g_d_1;
    end
    else begin
      rgbtohsv_fixpt_tmp_0_1 = rgbtohsv_fixpt_r_d_1;
    end
    if (rgbtohsv_fixpt_tmp_0_1 < rgbtohsv_fixpt_b_d_1) begin
      rgbtohsv_fixpt_tmp_0_1 = rgbtohsv_fixpt_b_d_1;
    end
    if (rgbtohsv_fixpt_tmp_0_1[15:8] != 8'b00000000) begin
      rgbtohsv_fixpt_Cmax_1 = 16'b1111111111111111;
    end
    else begin
      rgbtohsv_fixpt_Cmax_1 = {rgbtohsv_fixpt_tmp_0_1[7:0], 8'b00000000};
    end
    //'rgbtohsv_fixpt:17' Cmin = fi(min( min( r_d, g_d ), b_d ), 0, 16, 15, fm);
    if (rgbtohsv_fixpt_r_d_1 > rgbtohsv_fixpt_g_d_1) begin
      rgbtohsv_fixpt_tmp_1_1 = rgbtohsv_fixpt_g_d_1;
    end
    else begin
      rgbtohsv_fixpt_tmp_1_1 = rgbtohsv_fixpt_r_d_1;
    end
    if (rgbtohsv_fixpt_tmp_1_1 > rgbtohsv_fixpt_b_d_1) begin
      rgbtohsv_fixpt_tmp_1_1 = rgbtohsv_fixpt_b_d_1;
    end
    //'rgbtohsv_fixpt:18' delta = fi(Cmax - Cmin, 0, 16, 15, fm);
    rgbtohsv_fixpt_sub_cast_8 = rgbtohsv_fixpt_Cmax_1;
    if (rgbtohsv_fixpt_tmp_1_1[15:8] != 8'b00000000) begin
      rgbtohsv_fixpt_sub_cast_0_1 = 16'b1111111111111111;
    end
    else begin
      rgbtohsv_fixpt_sub_cast_0_1 = {rgbtohsv_fixpt_tmp_1_1[7:0], 8'b00000000};
    end
    rgbtohsv_fixpt_sub_cast_1_1 = rgbtohsv_fixpt_sub_cast_0_1;
    rgbtohsv_fixpt_sub_temp_3 = rgbtohsv_fixpt_sub_cast_8 - rgbtohsv_fixpt_sub_cast_1_1;
    if ((rgbtohsv_fixpt_sub_temp_3[17] == 1'b0) && (rgbtohsv_fixpt_sub_temp_3[16] != 1'b0)) begin
      rgbtohsv_fixpt_delta_1 = 16'b1111111111111111;
    end
    else if (rgbtohsv_fixpt_sub_temp_3[17] == 1'b1) begin
      rgbtohsv_fixpt_delta_1 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_delta_1 = rgbtohsv_fixpt_sub_temp_3[15:0];
    end
    //'rgbtohsv_fixpt:19' h_d = fi(0, 0, 16, 12, fm);
    //'rgbtohsv_fixpt:20' v_d = fi(Cmax, 0, 16, 15, fm);
    //'rgbtohsv_fixpt:21' s_d = fi(delta, 0, 16, 15, fm);
    //'rgbtohsv_fixpt:22' if Cmax==0
    if (rgbtohsv_fixpt_Cmax_1 == 16'b0000000000000000) begin
      rgbtohsv_fixpt_tmp_3 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_cast_5_1 = {rgbtohsv_fixpt_delta_1, 16'b0000000000000000};
      if (rgbtohsv_fixpt_Cmax_1 == 31'sd0) begin
        rgbtohsv_fixpt_div_temp_3 = 32'b11111111111111111111111111111111;
      end
      else begin
        rgbtohsv_fixpt_div_temp_3 = rgbtohsv_fixpt_cast_5_1 / rgbtohsv_fixpt_Cmax_1;
      end
      if (rgbtohsv_fixpt_div_temp_3[31:17] != 15'b000000000000000) begin
        rgbtohsv_fixpt_tmp_3 = 16'b1111111111111111;
      end
      else begin
        rgbtohsv_fixpt_tmp_3 = rgbtohsv_fixpt_div_temp_3[16:1];
      end
    end
    //'rgbtohsv_fixpt:27' if delta==0
    if (rgbtohsv_fixpt_delta_1 == 16'b0000000000000000) begin
      rgbtohsv_fixpt_tmp_2_1 = 16'b0000000000000000;
    end
    else begin
      rgbtohsv_fixpt_cast_6_1 = {rgbtohsv_fixpt_r_d_1, 8'b00000000};
      rgbtohsv_fixpt_cast_7_1 = rgbtohsv_fixpt_Cmax_1;
      if (rgbtohsv_fixpt_cast_6_1 == rgbtohsv_fixpt_cast_7_1) begin
        rgbtohsv_fixpt_sub_cast_2_1 = rgbtohsv_fixpt_g_d_1;
        rgbtohsv_fixpt_sub_cast_3_1 = rgbtohsv_fixpt_b_d_1;
        rgbtohsv_fixpt_sub_temp_0_1 = rgbtohsv_fixpt_sub_cast_2_1 - rgbtohsv_fixpt_sub_cast_3_1;
        if (rgbtohsv_fixpt_sub_temp_0_1[17] == 1'b1) begin
          rgbtohsv_fixpt_cast_10_1 = 17'b00000000000000000;
        end
        else begin
          rgbtohsv_fixpt_cast_10_1 = rgbtohsv_fixpt_sub_temp_0_1[16:0];
        end
        rgbtohsv_fixpt_cast_11_1 = {rgbtohsv_fixpt_cast_10_1, 16'b0000000000000000};
        if (rgbtohsv_fixpt_delta_1 == 31'sd0) begin
          rgbtohsv_fixpt_div_temp_0_1 = 33'h1FFFFFFFF;
        end
        else begin
          rgbtohsv_fixpt_div_temp_0_1 = rgbtohsv_fixpt_cast_11_1 / rgbtohsv_fixpt_delta_1;
        end
        if (rgbtohsv_fixpt_div_temp_0_1[32:12] != 21'b000000000000000000000) begin
          rgbtohsv_fixpt_tmp_2_1 = 16'b1111111111111111;
        end
        else begin
          rgbtohsv_fixpt_tmp_2_1 = {rgbtohsv_fixpt_div_temp_0_1[11:0], 4'b0000};
        end
      end
      else begin
        rgbtohsv_fixpt_cast_8_1 = {rgbtohsv_fixpt_g_d_1, 8'b00000000};
        rgbtohsv_fixpt_cast_9_1 = rgbtohsv_fixpt_Cmax_1;
        if (rgbtohsv_fixpt_cast_8_1 == rgbtohsv_fixpt_cast_9_1) begin
          rgbtohsv_fixpt_sub_cast_4_1 = rgbtohsv_fixpt_b_d_1;
          rgbtohsv_fixpt_sub_cast_5_1 = rgbtohsv_fixpt_r_d_1;
          rgbtohsv_fixpt_sub_temp_1_1 = rgbtohsv_fixpt_sub_cast_4_1 - rgbtohsv_fixpt_sub_cast_5_1;
          if (rgbtohsv_fixpt_sub_temp_1_1[17] == 1'b1) begin
            rgbtohsv_fixpt_cast_14_1 = 17'b00000000000000000;
          end
          else begin
            rgbtohsv_fixpt_cast_14_1 = rgbtohsv_fixpt_sub_temp_1_1[16:0];
          end
          rgbtohsv_fixpt_cast_15_1 = {rgbtohsv_fixpt_cast_14_1, 16'b0000000000000000};
          if (rgbtohsv_fixpt_delta_1 == 31'sd0) begin
            rgbtohsv_fixpt_div_temp_1_1 = 33'h1FFFFFFFF;
          end
          else begin
            rgbtohsv_fixpt_div_temp_1_1 = rgbtohsv_fixpt_cast_15_1 / rgbtohsv_fixpt_delta_1;
          end
          rgbtohsv_fixpt_add_cast_5 = rgbtohsv_fixpt_div_temp_1_1;
          rgbtohsv_fixpt_add_cast_0_1 = rgbtohsv_fixpt_add_cast_5;
          rgbtohsv_fixpt_add_temp_2 = 35'h000000200 + rgbtohsv_fixpt_add_cast_0_1;
          if (rgbtohsv_fixpt_add_temp_2[34] != 1'b0) begin
            rgbtohsv_fixpt_cast_18_1 = 34'h3FFFFFFFF;
          end
          else begin
            rgbtohsv_fixpt_cast_18_1 = rgbtohsv_fixpt_add_temp_2[33:0];
          end
          if (rgbtohsv_fixpt_cast_18_1[33:12] != 22'b0000000000000000000000) begin
            rgbtohsv_fixpt_tmp_2_1 = 16'b1111111111111111;
          end
          else begin
            rgbtohsv_fixpt_tmp_2_1 = {rgbtohsv_fixpt_cast_18_1[11:0], 4'b0000};
          end
        end
        else begin
          rgbtohsv_fixpt_cast_12_1 = {rgbtohsv_fixpt_b_d_1, 8'b00000000};
          rgbtohsv_fixpt_cast_13_1 = rgbtohsv_fixpt_Cmax_1;
          if (rgbtohsv_fixpt_cast_12_1 == rgbtohsv_fixpt_cast_13_1) begin
            rgbtohsv_fixpt_sub_cast_6_1 = rgbtohsv_fixpt_r_d_1;
            rgbtohsv_fixpt_sub_cast_7_1 = rgbtohsv_fixpt_g_d_1;
            rgbtohsv_fixpt_sub_temp_2_1 = rgbtohsv_fixpt_sub_cast_6_1 - rgbtohsv_fixpt_sub_cast_7_1;
            if (rgbtohsv_fixpt_sub_temp_2_1[17] == 1'b1) begin
              rgbtohsv_fixpt_cast_16_1 = 17'b00000000000000000;
            end
            else begin
              rgbtohsv_fixpt_cast_16_1 = rgbtohsv_fixpt_sub_temp_2_1[16:0];
            end
            rgbtohsv_fixpt_cast_17_1 = {rgbtohsv_fixpt_cast_16_1, 16'b0000000000000000};
            if (rgbtohsv_fixpt_delta_1 == 31'sd0) begin
              rgbtohsv_fixpt_div_temp_2_1 = 33'h1FFFFFFFF;
            end
            else begin
              rgbtohsv_fixpt_div_temp_2_1 = rgbtohsv_fixpt_cast_17_1 / rgbtohsv_fixpt_delta_1;
            end
            rgbtohsv_fixpt_add_cast_1_1 = rgbtohsv_fixpt_div_temp_2_1;
            rgbtohsv_fixpt_add_cast_2_1 = rgbtohsv_fixpt_add_cast_1_1;
            rgbtohsv_fixpt_add_temp_0_1 = 35'h000000400 + rgbtohsv_fixpt_add_cast_2_1;
            if (rgbtohsv_fixpt_add_temp_0_1[34] != 1'b0) begin
              rgbtohsv_fixpt_cast_19_1 = 34'h3FFFFFFFF;
            end
            else begin
              rgbtohsv_fixpt_cast_19_1 = rgbtohsv_fixpt_add_temp_0_1[33:0];
            end
            if (rgbtohsv_fixpt_cast_19_1[33:12] != 22'b0000000000000000000000) begin
              rgbtohsv_fixpt_tmp_2_1 = 16'b1111111111111111;
            end
            else begin
              rgbtohsv_fixpt_tmp_2_1 = {rgbtohsv_fixpt_cast_19_1[11:0], 4'b0000};
            end
          end
          else begin
            rgbtohsv_fixpt_tmp_2_1 = 16'b0000000000000000;
          end
        end
      end
    end
    //'rgbtohsv_fixpt:36' h_d = fi(h_d*fi(1/6, 0, 16, 18, fm), 0, 16, 12, fm);
    rgbtohsv_fixpt_mul_temp_2_1 = rgbtohsv_fixpt_tmp_2_1 * 43690;
    rgbtohsv_fixpt_h_d_1 = rgbtohsv_fixpt_mul_temp_2_1[31:18];
    //'rgbtohsv_fixpt:37' if h_d<0
    if (rgbtohsv_fixpt_h_d_1 < 16'b0000000000000000) begin
      rgbtohsv_fixpt_add_cast_3_1 = rgbtohsv_fixpt_h_d_1;
      rgbtohsv_fixpt_add_cast_4_1 = rgbtohsv_fixpt_add_cast_3_1;
      rgbtohsv_fixpt_add_temp_1_1 = rgbtohsv_fixpt_add_cast_4_1 + 4096;
      if (rgbtohsv_fixpt_add_temp_1_1[17] != 1'b0) begin
        rgbtohsv_fixpt_cast_20_1 = 17'b11111111111111111;
      end
      else begin
        rgbtohsv_fixpt_cast_20_1 = rgbtohsv_fixpt_add_temp_1_1[16:0];
      end
      if (rgbtohsv_fixpt_cast_20_1[16] != 1'b0) begin
        rgbtohsv_fixpt_h_d_1 = 16'b1111111111111111;
      end
      else begin
        rgbtohsv_fixpt_h_d_1 = rgbtohsv_fixpt_cast_20_1[15:0];
      end
    end
    //'rgbtohsv_fixpt:40' h = fi(uint8( h_d*fi(255, 0, 9, 0, fm) ), 0, 8, 0, fm);
    //'rgbtohsv_fixpt:41' s = fi(uint8( s_d*fi(255, 0, 9, 0, fm) ), 0, 8, 0, fm);
    //'rgbtohsv_fixpt:42' v = fi(uint8( v_d*fi(255, 0, 9, 0, fm) ), 0, 8, 0, fm);
    rgbtohsv_fixpt_mul_temp_3_1 = rgbtohsv_fixpt_h_d_1 * 255;
    if ((rgbtohsv_fixpt_mul_temp_3_1[24:20] != 5'b00000) || ((rgbtohsv_fixpt_mul_temp_3_1[24] == 1'b0) && (rgbtohsv_fixpt_mul_temp_3_1[19:12] == 8'b11111111))) begin
      rgbtohsv_fixpt_cast_21_1 = 8'b11111111;
    end
    else begin
      rgbtohsv_fixpt_cast_21_1 = rgbtohsv_fixpt_mul_temp_3_1[19:12] + rgbtohsv_fixpt_mul_temp_3_1[11];
    end
    h_1 = rgbtohsv_fixpt_cast_21_1;
    rgbtohsv_fixpt_mul_temp_4_1 = rgbtohsv_fixpt_tmp_3 * 255;
    if ((rgbtohsv_fixpt_mul_temp_4_1[24:23] != 2'b00) || ((rgbtohsv_fixpt_mul_temp_4_1[24] == 1'b0) && (rgbtohsv_fixpt_mul_temp_4_1[22:15] == 8'b11111111))) begin
      rgbtohsv_fixpt_cast_22_1 = 8'b11111111;
    end
    else begin
      rgbtohsv_fixpt_cast_22_1 = rgbtohsv_fixpt_mul_temp_4_1[22:15] + rgbtohsv_fixpt_mul_temp_4_1[14];
    end
    s_1 = rgbtohsv_fixpt_cast_22_1;
    rgbtohsv_fixpt_mul_temp_5_1 = rgbtohsv_fixpt_Cmax_1 * 255;
    if ((rgbtohsv_fixpt_mul_temp_5_1[24:23] != 2'b00) || ((rgbtohsv_fixpt_mul_temp_5_1[24] == 1'b0) && (rgbtohsv_fixpt_mul_temp_5_1[22:15] == 8'b11111111))) begin
      rgbtohsv_fixpt_cast_23_1 = 8'b11111111;
    end
    else begin
      rgbtohsv_fixpt_cast_23_1 = rgbtohsv_fixpt_mul_temp_5_1[22:15] + rgbtohsv_fixpt_mul_temp_5_1[14];
    end
    v_1 = rgbtohsv_fixpt_cast_23_1;
  end



  assign ce_out = ce;

  assign h = h_1;

  assign s = s_1;

  assign v = v_1;

endmodule  // rgbtohsv_fixpt

